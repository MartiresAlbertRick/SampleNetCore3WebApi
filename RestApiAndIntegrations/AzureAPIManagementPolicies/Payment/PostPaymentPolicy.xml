<!--
    IMPORTANT:
    - Policy elements can appear only within the <inbound>, <outbound>, <backend> section elements.
    - To apply a policy to the incoming request (before it is forwarded to the backend service), place a corresponding policy element within the <inbound> section element.
    - To apply a policy to the outgoing response (before it is sent back to the caller), place a corresponding policy element within the <outbound> section element.
    - To add a policy, place the cursor at the desired insertion point and select a policy from the sidebar.
    - To remove a policy, delete the corresponding policy statement from the policy document.
    - Position the <base> element within a section element to inherit all policies from the corresponding section element in the enclosing scope.
    - Remove the <base> element to prevent inheriting policies from the corresponding section element in the enclosing scope.
    - Policies are applied in the order of their appearance, from the top down.
    - Comments within policy elements are not supported and may disappear. Place your comments between policy elements or at a higher level scope.
-->
<policies>
    <inbound>
        <base />
        <choose>
            <when condition="@{ return (context.Request.Headers.TryGetValue("x-client-id", out var xClientId) && xClientId[0] == "ELDERSSAP") || (context.Request.Url.Query.TryGetValue("client", out var client) && client[0] == "ELDERSSAP"); }">
                <set-body template="liquid">
                    {
                        "caapsUniqueId" : "{{body.ZPAY_BT.IDOC.ZPAY01.CAAPS_ID}}",
                        "paymentStatus" : "{{body.ZPAY_BT.IDOC.ZPAY01.PAYMENT_STATUS}}",
                        "paymentDate" : "{{body.ZPAY_BT.IDOC.ZPAY01.PAYMENT_DATE}}",
                        "paymentAmount" : "{{body.ZPAY_BT.IDOC.ZPAY01.PAYMENT_AMOUNT}}",
                        "paymentMethod" : "{{body.ZPAY_BT.IDOC.ZPAY01.PAYMENT_METHOD}}",
                        "clientTransactionId" : "{{body.ZPAY_BT.IDOC.ZPAY01.CLIENT_TR_ID}}",
                        "paymentBatchNumber" : "{{body.ZPAY_BT.IDOC.ZPAY01.PAYMENT_BATCH}}",
                        "custom01" : "{{body.ZPAY_BT.IDOC.ZPAY01.CUSTOM_01}}",
                        "custom02" : "{{body.ZPAY_BT.IDOC.ZPAY01.CUSTOM_02}}",
                        "custom03" : "{{body.ZPAY_BT.IDOC.ZPAY01.CUSTOM_03}}",
                        "custom04" : "{{body.ZPAY_BT.IDOC.ZPAY01.CUSTOM_04}}"
                    }
                </set-body>
                <set-header name="Content-Type" exists-action="override">
                    <value>application/json</value>
                </set-header>
            </when>
            <otherwise>
                <set-body>@{
                    return context.Request.Body.As<string>();
                }</set-body>
            </otherwise>
        </choose>
    </inbound>
    <backend>
        <base />
    </backend>
    <outbound>
        <base />
    </outbound>
    <on-error>
        <base />
        <set-header name="ErrorSource" exists-action="override">
            <value>@(context.LastError.Source)</value>
        </set-header>
        <set-header name="ErrorReason" exists-action="override">
            <value>@(context.LastError.Reason)</value>
        </set-header>
        <set-header name="ErrorMessage" exists-action="override">
            <value>@(context.LastError.Message)</value>
        </set-header>
        <set-header name="ErrorScope" exists-action="override">
            <value>@(context.LastError.Scope)</value>
        </set-header>
        <set-header name="ErrorSection" exists-action="override">
            <value>@(context.LastError.Section)</value>
        </set-header>
        <set-header name="ErrorPath" exists-action="override">
            <value>@(context.LastError.Path)</value>
        </set-header>
        <set-header name="ErrorStatusCode" exists-action="override">
            <value>@(context.Response.StatusCode.ToString())</value>
        </set-header>
    </on-error>
</policies>